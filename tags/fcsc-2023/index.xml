<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FCSC 2023 on redoste</title><link>https://redoste.xyz/tags/fcsc-2023/</link><description>Recent content in FCSC 2023 on redoste</description><generator>Hugo</generator><language>en-us</language><copyright>© 2020 - 2025 redoste - [CC-BY-4.0](https://creativecommons.org/licenses/by/4.0/)</copyright><lastBuildDate>Sun, 30 Apr 2023 22:00:00 +0200</lastBuildDate><atom:link href="https://redoste.xyz/tags/fcsc-2023/index.xml" rel="self" type="application/rss+xml"/><item><title>Write-up FCSC 2023 : Contrôleur de licence</title><link>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-contr%C3%B4leur-de-licence/</link><pubDate>Sun, 30 Apr 2023 22:00:00 +0200</pubDate><guid>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-contr%C3%B4leur-de-licence/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>At first glace, &lt;em>Contrôleur de licence&lt;/em> seems to be a classic Windows reverse challenge. We give an input in the arguments and we get a &amp;ldquo;Invalid serial&amp;rdquo; &lt;code>MessageBox&lt;/code> in response.&lt;/p>
&lt;p>After importing the binary in Ghidra, we can already spot a few suspicious imports, such as &lt;code>CreateDecompressor&lt;/code> and &lt;code>Decompress&lt;/code> from &lt;code>CABINET.DLL&lt;/code> or &lt;code>WriteProcessMemory&lt;/code> and &lt;code>SetThreadContext&lt;/code> from &lt;code>KERNEL32.DLL&lt;/code>.&lt;/p>
&lt;p>It looks like the program will need to decompress data and modify the execution from other processes, this might be some kind of custom packer for the underlying input checking binary.&lt;/p></description></item><item><title>Write-up FCSC 2023 : Video Games Awards</title><link>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-video-games-awards/</link><pubDate>Sun, 30 Apr 2023 22:00:00 +0200</pubDate><guid>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-video-games-awards/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>Video Games Awards&lt;/em> or &lt;em>VGA&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> consists of a floppy image that can be booted with a virtualization or emulation software.&lt;/p>
&lt;p>Let&amp;rsquo;s start with &lt;code>qemu&lt;/code> :&lt;/p>
&lt;img src="https://redoste.xyz/img/20230430-FCSC-2023-Video-Games-Awards/Video-Games-Awards-001.png" alt="Screenshot of QEMU showing an &amp;#34;Enter key:&amp;#34; prompt after SeaBIOS booted the floppy"/>
&lt;p>We can enter a key and we get a great failure screen :&lt;/p>
&lt;img src="https://redoste.xyz/img/20230430-FCSC-2023-Video-Games-Awards/Video-Games-Awards-002.png" alt="&amp;#34;Losing France Cybersecurity Challenge&amp;#34; Logo"/>
&lt;h1 id="ii---reversing-the-boot-sector">II - Reversing the boot sector&lt;/h1>
&lt;p>It is fairly common knowledge that the BIOS of IBM PC compatible computers (i.e. 99.9999% of non UEFI x86 machines) load the first sector of the device they want to boot from. We can extract the first sector of the flopy using &lt;code>dd&lt;/code> and import it into Ghidra at address &lt;code>0000:7c00&lt;/code>.&lt;/p></description></item></channel></rss>