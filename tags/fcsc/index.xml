<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FCSC on redoste</title><link>https://redoste.xyz/tags/fcsc/</link><description>Recent content in FCSC on redoste</description><generator>Hugo</generator><language>en-us</language><copyright>© 2020 - 2025 redoste - [CC-BY-4.0](https://creativecommons.org/licenses/by/4.0/)</copyright><lastBuildDate>Sun, 14 Apr 2024 22:00:00 +0200</lastBuildDate><atom:link href="https://redoste.xyz/tags/fcsc/index.xml" rel="self" type="application/rss+xml"/><item><title>Write-up FCSC 2024 : Kraken</title><link>https://redoste.xyz/2024/04/14/write-up-fcsc-2024-kraken/</link><pubDate>Sun, 14 Apr 2024 22:00:00 +0200</pubDate><guid>https://redoste.xyz/2024/04/14/write-up-fcsc-2024-kraken/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>Kraken&lt;/em> looks like a fairly complex reversing challenge. We are given a few more files at the start in addition
to the binary, the most important one being a &lt;code>Dockerfile&lt;/code> that sets up a specific environement required to run
the program easily.&lt;/p>
&lt;p>A quick look at this &lt;code>Dockerfile&lt;/code> will tease us about what we are about to endure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> debian:bookworm-slim&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /build&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;deb-src http://http.us.debian.org/debian bookworm main&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/apt/sources.list &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apt-get update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apt-get install -qy --no-install-recommends &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> dpkg-dev &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> build-essential &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> fakeroot &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> devscripts &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> clinfo &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> llvm-spirv-15 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ocl-icd-libopencl1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#75715e"># Dependencies for pocl compilation \&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apt-get source pocl-opencl-icd &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apt-get build-dep -qy pocl-opencl-icd &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> apt-get clean &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> rm -rf /var/lib/apt/lists/ &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> cd pocl-3.1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> DEB_BUILD_OPTIONS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;notest nocheck nodocs&amp;#34;&lt;/span> debuild -us -uc &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> cd .. &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> dpkg -i *.deb&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ugh&amp;hellip; &lt;code>llvm-spirv-15&lt;/code>, &lt;code>pocl-opencl-icd&lt;/code>, it sounds like we are about to see some GPU shenanigans.&lt;/p></description></item><item><title>Write-up FCSC 2023 : Contrôleur de licence</title><link>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-contr%C3%B4leur-de-licence/</link><pubDate>Sun, 30 Apr 2023 22:00:00 +0200</pubDate><guid>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-contr%C3%B4leur-de-licence/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>At first glace, &lt;em>Contrôleur de licence&lt;/em> seems to be a classic Windows reverse challenge. We give an input in the arguments and we get a &amp;ldquo;Invalid serial&amp;rdquo; &lt;code>MessageBox&lt;/code> in response.&lt;/p>
&lt;p>After importing the binary in Ghidra, we can already spot a few suspicious imports, such as &lt;code>CreateDecompressor&lt;/code> and &lt;code>Decompress&lt;/code> from &lt;code>CABINET.DLL&lt;/code> or &lt;code>WriteProcessMemory&lt;/code> and &lt;code>SetThreadContext&lt;/code> from &lt;code>KERNEL32.DLL&lt;/code>.&lt;/p>
&lt;p>It looks like the program will need to decompress data and modify the execution from other processes, this might be some kind of custom packer for the underlying input checking binary.&lt;/p></description></item><item><title>Write-up FCSC 2023 : Video Games Awards</title><link>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-video-games-awards/</link><pubDate>Sun, 30 Apr 2023 22:00:00 +0200</pubDate><guid>https://redoste.xyz/2023/04/30/write-up-fcsc-2023-video-games-awards/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>Video Games Awards&lt;/em> or &lt;em>VGA&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> consists of a floppy image that can be booted with a virtualization or emulation software.&lt;/p>
&lt;p>Let&amp;rsquo;s start with &lt;code>qemu&lt;/code> :&lt;/p>
&lt;img src="https://redoste.xyz/img/20230430-FCSC-2023-Video-Games-Awards/Video-Games-Awards-001.png" alt="Screenshot of QEMU showing an &amp;#34;Enter key:&amp;#34; prompt after SeaBIOS booted the floppy"/>
&lt;p>We can enter a key and we get a great failure screen :&lt;/p>
&lt;img src="https://redoste.xyz/img/20230430-FCSC-2023-Video-Games-Awards/Video-Games-Awards-002.png" alt="&amp;#34;Losing France Cybersecurity Challenge&amp;#34; Logo"/>
&lt;h1 id="ii---reversing-the-boot-sector">II - Reversing the boot sector&lt;/h1>
&lt;p>It is fairly common knowledge that the BIOS of IBM PC compatible computers (i.e. 99.9999% of non UEFI x86 machines) load the first sector of the device they want to boot from. We can extract the first sector of the flopy using &lt;code>dd&lt;/code> and import it into Ghidra at address &lt;code>0000:7c00&lt;/code>.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2022 : More Hello</title><link>https://redoste.xyz/2022/05/08/fr-write-up-fcsc-2022-more-hello/</link><pubDate>Sun, 08 May 2022 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2022/05/08/fr-write-up-fcsc-2022-more-hello/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>More Hello&lt;/em> se compose d&amp;rsquo;un simple binaire FreeBSD AArch64 qui semble abordable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ file more_hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>more_hello: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /libexec/ld-elf.so.1, for FreeBSD 14.0 (1400046), FreeBSD-style, stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Premier reflexe, on importe le binaire dans Ghidra pour avoir une idée de ce qu&amp;rsquo;il fait.&lt;/p>
&lt;img src="https://redoste.xyz/img/20220508-FCSC-2022-More-Hello/More-Hello-001.png" alt="Capture d&amp;#39;écran de Ghidra comportant des erreurs de désassemblage"/>
&lt;p>Oh non.&lt;/p>
&lt;p>Ca risque de ne pas être aussi simple que prévu.&lt;/p></description></item><item><title>Write-up FCSC 2022 : Perfect Cell - Stars:3rdMix PS3Edition</title><link>https://redoste.xyz/2022/05/08/write-up-fcsc-2022-perfect-cell-stars3rdmix-ps3edition/</link><pubDate>Sun, 08 May 2022 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2022/05/08/write-up-fcsc-2022-perfect-cell-stars3rdmix-ps3edition/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>The description of &lt;em>Perfect Cell&lt;/em> states that a friend of us made an homebrew for an &amp;ldquo;amazing multiplayer fighting game&amp;rdquo;. It&amp;rsquo;s joined with a file with the &lt;code>.self&lt;/code> extension.&lt;/p>
&lt;p>We&amp;rsquo;ll start with the first obvious thing&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ file perfect-cell.self
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perfect-cell.self: data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh.&lt;/p>
&lt;p>That&amp;rsquo;s a good start.&lt;/p>
&lt;p>Binwalk is able to find an ELF header a little bit later in the file but even after removing the first 0x90 bytes the file reamains unusable.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2021 : Stars:2ndMix CryptoEdition</title><link>https://redoste.xyz/2021/05/03/fr-write-up-fcsc-2021-stars2ndmix-cryptoedition/</link><pubDate>Mon, 03 May 2021 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2021/05/03/fr-write-up-fcsc-2021-stars2ndmix-cryptoedition/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>Stars:2ndMix CryptoEdition&lt;/em> se compose d&amp;rsquo;une image d&amp;rsquo;un disque de &lt;em>Dreamcast&lt;/em> au format &lt;em>DiscJuggler&lt;/em>. Ce challenge me semblait intéressant, car j&amp;rsquo;ai comme une attirance pour les architectures bizares et mal documentées, j&amp;rsquo;ai notamment précedemment travaillé sur &lt;a href="https://github.com/redoste/fx-CG50_Manager_PLUS-gdbserver">un debuggeur pour calculatrices Casio&lt;/a> qui ont la particularité d&amp;rsquo;utiliser la même architecuture que la Dreamcast (SuperH 4).&lt;/p>
&lt;p>Il nous est indiqué dans la description du challenge que celui avait été testé avec &lt;a href="https://github.com/flyinghead/flycast">Flycast&lt;/a>, on télécharge donc le code source et on utilise &lt;code>cmake&lt;/code> pour le compiler. On peut ensuite l&amp;rsquo;executer et ouvrir l&amp;rsquo;image disque fournie.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2021 : VMV</title><link>https://redoste.xyz/2021/05/03/fr-write-up-fcsc-2021-vmv/</link><pubDate>Mon, 03 May 2021 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2021/05/03/fr-write-up-fcsc-2021-vmv/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>&lt;em>VMV&lt;/em> se compose d&amp;rsquo;un simple executable ELF pour Linux x86-64. Il demande une chaine de 16 caractères de long en entrée et est censé nous indiquer s&amp;rsquo;il s&amp;rsquo;aggit du bon flag.&lt;/p>
&lt;p>On peut essayer de l&amp;rsquo;executer pour voir :&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./vmv 0123456789ABCDEF
[fr] Ne quittez pas, un correspondant va prendre votre appel... [\fr]
* bruit de ventilateur de PC qui accélère *
[fr] Ne quittez pas, un correspondant va prendre votre appel... [\fr]
* htop indique 100% d&amp;#39;usage du CPU *
[fr] Ne quittez pas, un correspondant va prendre votre appel... [\fr]
&lt;/code>&lt;/pre>&lt;p>Bon il semble que comprendre ce qui se passe dynamiquement soit plutôt compromis.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2020 : Hello Rootkitty</title><link>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-hello-rootkitty/</link><pubDate>Mon, 04 May 2020 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-hello-rootkitty/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>Le challenge se compose d&amp;rsquo;un module Linux pour un kernel &lt;code>4.14.167 amd64&lt;/code>. Celui-ci est chargé automatiquement dans une VM QEMU accessible via une connexion ssh sur la machine hôte.&lt;/p>
&lt;h1 id="ii---analyse-statique-et-découverte-du-buffer-overflow">II - Analyse statique et découverte du buffer overflow&lt;/h1>
&lt;p>Après une analyse statique du binaire avec &lt;em>Ghidra&lt;/em>, nous remarquons que le module va modifier la table des syscalls pour remplacer &lt;code>lstat&lt;/code>, &lt;code>getdents&lt;/code> et &lt;code>getdents64&lt;/code>.
Ces versions modifiées des syscalls vont faire appel a ceux d&amp;rsquo;origine et modifier leur retour de manière à masquer les informations à propos des fichiers commençant par &lt;code>ecsc_flag_&lt;/code>. Le but est donc de trouver un moyen de contourner cette restriction de manière à pouvoir lire le fichier contenant le flag à la racine de la machine.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2020 : Risky Business</title><link>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-risky-business/</link><pubDate>Mon, 04 May 2020 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-risky-business/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>Le challenge est composé d&amp;rsquo;un simple binaire ELF RISC-V.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ file risky-business
risky-business: ELF 64-bit LSB shared object, UCB RISC-V, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-riscv64-lp64d.so.1, for GNU/Linux 4.15.0, BuildID[sha1]=..., not stripped
&lt;/code>&lt;/pre>&lt;p>Le but est d&amp;rsquo;exploiter ce binaire de manière à obtenir un shell sur la machine l&amp;rsquo;exécutant. On peut interagir avec lui via une simple connexion TCP que l&amp;rsquo;on peut établir avec &lt;code>netcat&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>nc challenges1.france-cybersecurity-challenge.fr 4004
&lt;/code>&lt;/pre>&lt;p>À première vue le binaire semble accepter des données via l&amp;rsquo;entrée standard avant de s&amp;rsquo;arrêter.&lt;/p></description></item><item><title>[FR] Write-up FCSC 2020 : Why not a Sandbox</title><link>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-why-not-a-sandbox/</link><pubDate>Mon, 04 May 2020 18:00:00 +0200</pubDate><guid>https://redoste.xyz/2020/05/04/fr-write-up-fcsc-2020-why-not-a-sandbox/</guid><description>&lt;h1 id="i---intro">I - Intro&lt;/h1>
&lt;p>Le challenge se compose d&amp;rsquo;un interpréteur Python 3.8.2 avec lequel nous pouvons interagir via une simple connexion TCP obtenable avec &lt;code>netcat&lt;/code>. Cet interpréteur modifié va lever une exception lorsque certaine actions sont effectuées. Il est donc impossible d&amp;rsquo;appeler &lt;code>os.system&lt;/code> pour obtenir un shell ou d&amp;rsquo;ouvrir un fichier avec &lt;code>open()&lt;/code>. Le but est donc d&amp;rsquo;appeler la fonction &lt;code>print_flag()&lt;/code> qui a été ajoutée à la librairie principale de Python, qui peut être accédée via le module &lt;code>ctypes&lt;/code>. Cependant celle-ci va aussi lever une exception.&lt;/p></description></item></channel></rss>